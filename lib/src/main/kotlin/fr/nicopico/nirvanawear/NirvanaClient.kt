/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package fr.nicopico.nirvanawear

import fr.nicopico.nirvanawear.exceptions.AuthenticationException
import fr.nicopico.nirvanawear.exceptions.FetchTasksException
import fr.nicopico.nirvanawear.models.AuthToken
import fr.nicopico.nirvanawear.models.Task
import fr.nicopico.nirvanawear.json.ResponseJson
import fr.nicopico.nirvanawear.json.result.TaskResultJson
import fr.nicopico.nirvanawear.parse.toTask
import fr.nicopico.nirvanawear.parse.tasks
import fr.nicopico.nirvanawear.parse.token
import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.engine.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.client.request.*
import io.ktor.client.request.forms.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import kotlinx.serialization.json.Json

interface NirvanaClient {
    suspend fun authenticate(login: String, password: String): AuthToken
    suspend fun fetchTasks(token: AuthToken, since: Long = 0): List<Task>
}

class NirvanaClientKtor(
    engine: HttpClientEngine,
    private val appId: String = "nirv-wear"
) : NirvanaClient {
    private val httpClient = HttpClient(engine) {
        install(ContentNegotiation) {
            json(json = Json {
                ignoreUnknownKeys = true
            })
        }
    }

    private val baseUrl = "https://api.nirvanahq.com"

    override suspend fun authenticate(login: String, password: String): AuthToken {
        val response =  httpClient.submitForm(
            url = "$baseUrl/?api=rest",
            formParameters = Parameters.build {
                append("method", "auth.new")
                append("u", login)
                append("p", password)
            },
        )
        if (response.status.isSuccess()) {
            return response.body<ResponseJson>()
                .token
                .let { AuthToken(it) }

        } else {
            throw AuthenticationException(response.status.value, response.bodyAsText())
        }
    }

    override suspend fun fetchTasks(token: AuthToken, since: Long): List<Task> {
        val response = httpClient.get(
            urlString = "$baseUrl/?api=rest&appid=$appId&authtoken=${token.value}&method=tasks&since=$since"
        )
        if (response.status.isSuccess()) {
            return response.body<ResponseJson>()
                .tasks
                .map(TaskResultJson::toTask)
        } else {
            val reason = response.bodyAsText()
            when (response.status) {
                HttpStatusCode.Forbidden -> throw AuthenticationException(response.status.value, reason)
                HttpStatusCode.Unauthorized -> throw AuthenticationException(response.status.value, reason)
                else -> {
                    throw FetchTasksException(response.status.value, reason)
                }
            }
        }
    }
}
